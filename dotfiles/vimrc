"""""""""""""""""""""""""""""""""""""""
"
"      Install Plugins
"
"""""""""""""""""""""""""""""""""""""""

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
  Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'drmingdrmer/vim-toggle-quickfix'
  Plug 'fatih/vim-go'
  Plug 'hashivim/vim-terraform'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'lfv89/vim-interestingwords'
  Plug 'mhinz/vim-signify'
  Plug 'roxma/vim-tmux-clipboard'
  Plug 'ruanyl/vim-gh-line'
  Plug 'scrooloose/nerdtree'
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rails'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'w0rp/ale'
  Plug 'wincent/vim-clipper'
  Plug 'ycm-core/YouCompleteMe'
call plug#end()

"""""""""""""""""""""""""""""""""""""""
"
"      Configure Plugins
"
"""""""""""""""""""""""""""""""""""""""

" theme/colorscheme
colorscheme Tomorrow-Night-Eighties
let g:airline_theme='tomorrow'
let g:airline_section_b = ''
let g:airline_section_y = ''
let g:airline_section_error = ''
let g:airline_section_warning = ''

" clipper
call clipper#set_invocation('nc 10.0.0.2 8377')
nmap <Leader>y :Clip<CR>

" vim-go
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
map <C-g> :GoBuild<CR>
let g:go_list_type = "quickfix"
let g:go_list_height = 10

" vim-fzf
let $FZF_DEFAULT_COMMAND='find . '
nnoremap <Leader>o : Files <ENTER>
nnoremap <Leader>b : Buffers <ENTER>
map <Leader>s :Ag<CR>
function! s:getVisualSelection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ""
    endif
    let lines[-1] = lines[-1][:column_end - (&selection == "inclusive" ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
   return join(lines, "\n")
endfunction
nnoremap <silent><leader>f viw<Esc>:Ag! <C-R>=<SID>getVisualSelection()<CR><CR>
vnoremap <silent><leader>f <Esc>:Ag! <C-R>=<SID>getVisualSelection()<CR><CR>

" vim-fugitive
noremap fu :h fugitive-maps<cr>
map <Leader>gs :Gstatus<CR>
map <Leader>gl :Glog<CR>

" ale
let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \}
let  g:ale_fix_on_save=1
au BufWritePost * if getline(1) =~ "^#!.*sh" | let b:ale_fixers=  ['shfmt', 'remove_trailing_lines', 'trim_whitespace']
au BufWritePost * if getline(1) =~ "^#!.*sh" | let b:ale_fix_on_save=1 
map <leader>as :ALEFix shfmt<cr>
map <leader>as :ALEFix shfmt<cr>
let g:ale_echo_cursor = 1
let g:ale_set_highlights = 0

" misc
let g:gh_open_command = 'fn() { echo "$@" | nc 10.0.0.2 8377; }; fn '
let g:terraform_fmt_on_save=1
map <C-q> <Plug>window:quickfix:toggle
map <Leader>n :NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""
"
"      Configure Vim
"
"""""""""""""""""""""""""""""""""""""""

syntax enable
filetype plugin indent on

set clipboard=unnamed
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
set backspace=indent,eol,start
set virtualedit=all
set ruler
set number
set nocompatible
set mouse=a
set noswapfile
set pastetoggle=<F2>
set splitbelow
set splitright
set ignorecase
set smartcase

nnoremap <Leader>v :vnew<CR>
nnoremap <Leader>h :new<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
noremap <Leader><Leader> :b#<CR>
noremap <leader>c Gygg
nnoremap <space> :
nnoremap bg :sus<CR>
inoremap jk <Esc>
nnoremap <Leader>r :e!<CR>
nnoremap ged :e $MYVIMRC<CR>
nnoremap gsr :so $MYVIMRC<CR>
nmap cp :let @" = expand("%:p")<CR>

